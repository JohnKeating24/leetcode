class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        vector<vector<int>> result;
        vector<int> path;
        vector<int> visited(nums.size(),0);
        dfs(path,result,visited,nums);
        return result;
    }
    void dfs(vector<int>&path,vector<vector<int>>&result,vector<int>&visited,vector<int>&nums){
        if(path.size()==nums.size()) {
            result.push_back(path);
            return;
        }
        for(int i=0;i<nums.size();i++)
            if(visited[i]==0){
                if(i>0 && nums[i]==nums[i-1] && visited[i-1]==0) continue;
                visited[i]=1;
                path.push_back(nums[i]);
                dfs(path,result,visited,nums);
                path.pop_back();
                visited[i]=0;
            }
    }
};
