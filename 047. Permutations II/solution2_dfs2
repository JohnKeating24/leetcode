class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        vector<vector<int>> result;
        vector<int> path;
        vector<int> visited(nums.size(),0);
        dfs(nums,0,visited,path,result);
        return result;
    }
    void dfs(vector<int>&nums,int step,vector<int>&visited,vector<int>&path,vector<vector<int>>&result){
        if(step==nums.size()) result.push_back(path);
        else
            for(int i=0;i<nums.size();i++)
                if(visited[i]==0){
                    if(i>0 && nums[i]==nums[i-1] && visited[i-1]==0) continue;
                    visited[i]=1;
                    path.push_back(nums[i]);
                    dfs(nums,step+1,visited,path,result);   //notice: here is step+1,not  i+1 .  why???
                    path.pop_back();
                    visited[i]=0;
                }
    }
};


// 上式dfs中，if;else等价于
// if{...;return ;} ...
    void dfs(vector<int>&nums,int step,vector<int>&visited,vector<int>&path,vector<vector<int>>&result){
        if(step==nums.size()) {result.push_back(path);return;}
        for(int i=0;i<nums.size();i++)
            if(visited[i]==0){
                if(i>0 && nums[i]==nums[i-1] && visited[i-1]==0) continue;
                visited[i]=1;
                path.push_back(nums[i]);
                dfs(nums,step+1,visited,path,result);
                path.pop_back();
                visited[i]=0;
            }
    }
