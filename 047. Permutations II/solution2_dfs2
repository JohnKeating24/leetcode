class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        vector<vector<int>> result;
        vector<int> path;
        vector<int> visited(nums.size(),0);
        dfs(path,result,visited,nums);
        return result;
    }
    void dfs(vector<int>&path,vector<vector<int>>&result,vector<int>&visited,vector<int>&nums){
        if(path.size()==nums.size()) {
            result.push_back(path);
            return;
        }
        for(int i=0;i<nums.size();i++)
            if(visited[i]==0){
                if(i>0 && nums[i]==nums[i-1] && visited[i-1]==0) continue;
                visited[i]=1;
                path.push_back(nums[i]);
                dfs(path,result,visited,nums);
                path.pop_back();
                visited[i]=0;
            }
    }
};



//如果当前元素和之前元素重复，则只有之前元素访问过之后，才能访问当前元素。？？？
实例化。[1 1 2]为示区别，记为[1a 1b 2]
第一次for(),i=0,结果为 [1a 1b 2]  [1a 2 1b]
第二次for(),i=1,若没有上述的判断，结果为 [1b 1a 2] [1b 2 1a],和第一次的结果重复。
