class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        if(board.size()==0 || board[0].size()==0 || word.size()==0) return false;
        int m=board.size(),n=board[0].size();
        vector<vector<bool>> visited(m,vector<bool>(n,false));
        for(int i=0;i<board.size();i++)
            for(int j=0;j<board[0].size();j++)
                if(dfs(0,i,j,board,word,visited))
                    return true;
        return false;
    }
    bool dfs(int index,int i,int j,vector<vector<char>>& board, string word,vector<vector<bool>> &visited){      
        if(index==word.size()) 
            return true;
        if(i<0 || j<0 || i>=board.size() || j>=board[0].size()) 
            return false;
        if(visited[i][j]==true || word[index]!=board[i][j]) 
            return false;
        visited[i][j]=true;
        bool result=dfs(index+1,i+1,j,board,word,visited) ||
                    dfs(index+1,i-1,j,board,word,visited) ||
                    dfs(index+1,i,j+1,board,word,visited) ||
                    dfs(index+1,i,j-1,board,word,visited);
        visited[i][j]=false;
        return result;
    }
};
