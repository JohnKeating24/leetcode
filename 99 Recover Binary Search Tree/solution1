/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void recoverTree(TreeNode* root) {
        TreeNode *prev=NULL,*cur=root;
        pair<TreeNode *,TreeNode *> broken;
        while(cur!=NULL){
            if(cur->left==NULL){
                detect(broken,prev,cur);
                prev=cur;
                cur=cur->right;
            }else{
                TreeNode *node=cur->left;
                while(node->right!=NULL && node->right!=cur)
                    node=node->right;
                if(node->right==NULL){
                    node->right=cur;
                    cur=cur->left;
                }else{
                    detect(broken,prev,cur);
                    prev=cur;
                    node->right=NULL;
                    cur=cur->right;
                }
            }
        }
        swap(broken.first->val,broken.second->val);
    }
    void detect(pair<TreeNode *,TreeNode *> &broken,TreeNode *prev,TreeNode *cur){
        if(prev!=NULL && prev->val>cur->val){
            if(broken.first==NULL)
                broken.first=prev;
            broken.second=cur;
        }
    }
};
