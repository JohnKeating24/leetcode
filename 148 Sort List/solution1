/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(!head || !head->next) return head;
        ListNode *slow=head,*fast=head->next;
        while(fast && fast->next){
            slow=slow->next;
            fast=fast->next->next;
        }
        ListNode *head2=slow->next;
        slow->next=NULL;
        ListNode *l1=sortList(head);
        ListNode *l2=sortList(head2);
        return mergeTwoLists(l1,l2);
    }
    ListNode* mergeTwoLists(ListNode* l1,ListNode *l2){
        ListNode dummy(-1);
        ListNode *pre=&dummy;
        while(l1 && l2){
            if(l1->val<=l2->val){pre=pre->next=l1;l1=l1->next;}
            else {pre=pre->next=l2;l2=l2->next;}
        }
        if(l1==nullptr) pre->next=l2;
        if(l2==nullptr) pre->next=l1;
        return dummy.next;
    }
};
